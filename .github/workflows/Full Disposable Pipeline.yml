name: Full Disposable Pipeline

on:
  schedule:
    - cron: "30 14 * * *" # Daily at 02:30 PM UTC (adjust as needed)
  workflow_dispatch:

jobs:
  full-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Insert Food Sales
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python scripts/insert_food_sales.py

      - name: Wait for Supabase trigger to refresh disposable_daily_usage
        run: |
          echo "Waiting for trigger to refresh trigger to refresh disposable_daily_usage"
          sleep 60

      - name: Log Disposable Usage and Update Stock
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python scripts/disposable_logger.py

      - name: Wait before refreshing final order view
        run: |
          echo "Waiting before refreshing final materialized view..."
          sleep 5

      - name: Refresh Final Order View
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python scripts/refresh_final_order_view.py

# ‚∏ª

# üîß name: Full Disposable Pipeline

# This names your GitHub Actions workflow. When it runs (on a schedule or manually), you‚Äôll see this name in GitHub‚Äôs ‚ÄúActions‚Äù tab.

# ‚∏ª

# ‚è∞ on: ‚Äî What triggers this pipeline?

# on:
#   schedule:
#     - cron: "30 14 * * *"  # Daily at 2:30 PM UTC
#   workflow_dispatch:

# You are telling GitHub:
# 	‚Ä¢	schedule: Run automatically every day at 2:30 PM UTC
# 	‚Ä¢	This is 10:30 AM Eastern Time (Canada), if you‚Äôre in EDT (UTC-4)
# 	‚Ä¢	workflow_dispatch: Also allow running this manually from the GitHub Actions tab

# ‚∏ª

# üöÄ jobs: ‚Äî Define what this pipeline should do

# jobs:
#   full-pipeline:
#     runs-on: ubuntu-latest

# This defines one job named full-pipeline and says:
# 	‚Ä¢	Run on a Linux-based server (ubuntu-latest) provided by GitHub

# ‚∏ª

# üß± steps: ‚Äî Step-by-step tasks the job will perform

# ‚∏ª

# 1. ‚úÖ Checkout the code

# - name: Checkout repo
#   uses: actions/checkout@v3

# This step downloads your GitHub repository code onto the virtual machine so it can run Python files from it.

# ‚∏ª

# 2. üêç Set up Python

# - name: Set up Python
#   uses: actions/setup-python@v4
#   with:
#     python-version: '3.11'

# This installs Python 3.11 in the environment so your scripts can run.

# ‚∏ª

# 3. üì¶ Install required libraries

# - name: Install dependencies
#   run: |
#     pip install -r requirements.txt

# This installs the packages (like supabase, python-dotenv) listed in your requirements.txt file.

# ‚∏ª

# 4. üçΩÔ∏è Run the insert_food_sales.py script

# - name: Insert Food Sales
#   env:
#     SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#     SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
#   run: |
#     python insert_food_sales.py

# 	‚Ä¢	This runs your first script that:
# 	‚Ä¢	Reads Power BI Excel data
# 	‚Ä¢	Cleans and maps food item sales
# 	‚Ä¢	Inserts them into the food_sales table in Supabase
# 	‚Ä¢	env: Supplies your Supabase credentials securely from GitHub secrets

# ‚∏ª

# 5. ‚è≥ Wait for the trigger to finish

# - name: Wait for Supabase trigger to refresh view
#   run: |
#     echo "Waiting for trigger to refresh materialized view..."
#     # sleep 60 seconds

# This is a pause step to let Supabase‚Äôs trigger finish refreshing the disposable_daily_usage materialized view after the food sales insert.
# 	‚Ä¢	Currently, the sleep 60 line is commented (#) ‚Äî it won‚Äôt pause unless you uncomment it.
# 	‚Ä¢	You should uncomment it so the next script doesn‚Äôt run before the view is refreshed.

# ‚úÖ Fix it like this:

# run: |
#   echo "Waiting for trigger to refresh materialized view..."
#   sleep 60

# ‚∏ª

# 6. üì¶ Log usage + Update stock

# - name: Log Disposable Usage and Update Stock
#   env:
#     SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#     SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
#   run: |
#     python disposable_logger.py

# This step:
# 	‚Ä¢	Pulls from the disposable_daily_usage materialized view
# 	‚Ä¢	Inserts each day‚Äôs usage into disposable_usage_log
# 	‚Ä¢	Calls your stored procedure update_stock_after_sales() to update inventory

# It finishes the chain.

# ‚∏ª

# üîê env ‚Üí Supabase secrets

# In both scripts, you‚Äôre using:

# env:
#   SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#   SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

# These secrets must be added in GitHub ‚Üí Repo Settings ‚Üí Secrets and Variables ‚Üí Actions
# This keeps your keys secure and out of code.

